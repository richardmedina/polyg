// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Polyg.Infrastructure.Domain;

namespace Polyg.Infrastructure.Domain.Migrations
{
    [DbContext(typeof(PolygDbContext))]
    [Migration("20201018112425_Added Phrases")]
    partial class AddedPhrases
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Polyg.Infrastructure.Domain.Entities.AuthUserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuthUser","Security");
                });

            modelBuilder.Entity("Polyg.Infrastructure.Domain.Entities.LanguageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages","Business");
                });

            modelBuilder.Entity("Polyg.Infrastructure.Domain.Entities.PhraseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("LanguageFromId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LanguageToId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageFromId");

                    b.HasIndex("LanguageToId");

                    b.HasIndex("UserId");

                    b.ToTable("Phrases","Business");
                });

            modelBuilder.Entity("Polyg.Infrastructure.Domain.Entities.PhraseEntity", b =>
                {
                    b.HasOne("Polyg.Infrastructure.Domain.Entities.LanguageEntity", "LanguageFrom")
                        .WithMany()
                        .HasForeignKey("LanguageFromId");

                    b.HasOne("Polyg.Infrastructure.Domain.Entities.LanguageEntity", "LanguageTo")
                        .WithMany()
                        .HasForeignKey("LanguageToId");

                    b.HasOne("Polyg.Infrastructure.Domain.Entities.AuthUserEntity", "User")
                        .WithMany("Phrases")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
